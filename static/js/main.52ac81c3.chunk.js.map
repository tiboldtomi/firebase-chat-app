{"version":3,"sources":["screens/home/index.tsx","screens/login/index.tsx","utils/theme.ts","screens/welcome/styles.ts","screens/welcome/index.tsx","screens/register/index.tsx","components/app/styles.ts","components/app/index.tsx","components/authenticated-route/index.tsx","components/styles/button.ts","components/styles/social-media-button.ts","serviceWorker.ts","index.tsx"],"names":["Home","Login","history","useHistory","onClick","goBack","theme","WelcomeContainer","styled","div","WelcomeCircle","H1","h1","TitleContainer","TitleIcon","ControlsContainer","P","p","SocialMediaContainer","Welcome","top","useSpring","from","defaultButtonTransform","transform","delay","primaryButtonTransform","socialMediaContainerTransform","titleIconScale","AP","animated","AButton","Button","ATitleIcon","AWelcomeCircle","ASocialMediaContainer","style","icon","faAngellist","width","height","variant","console","log","faFacebookF","size","faGooglePlusG","Register","AppContainer","Circle","InnerCircle","App","exact","path","component","screen","userLoggedIn","AuthenticatedRoute","rest","render","to","button","SocialMediaButton","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52ac81c3.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\ninterface IHomeProps { }\r\n\r\nconst Home: React.FC<IHomeProps> = () => {\r\n\r\n    return (\r\n        <div>{'Home'}</div>\r\n    );\r\n}\r\n\r\nexport default Home;","import * as React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface ILoginProps { }\r\n\r\nconst Login: React.FC<ILoginProps> = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div>\r\n            <div>{'Login screen'}</div>\r\n            <button onClick={() => history.goBack()}>{'Back'}</button>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Login;","export const theme = {\r\n    fontColor: '#fff',\r\n    fontSize: '16px',\r\n    primaryColor: '#A7696A',\r\n    dark: 'rgba(48,48,48,1)',\r\n    dark06: 'rgba(48,48,48,0.6)',\r\n    darker: 'rgba(30,30,30,1)',\r\n    darker06: 'rgba(30,30,30,0.6)',\r\n};","import styled from 'styled-components';\r\nimport { theme } from '../../utils/theme';\r\n\r\nexport const WelcomeContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n`;\r\n\r\nexport const WelcomeCircle = styled.div`\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n    left: 50%;\r\n    width: 100vh;\r\n    height: 100vh;\r\n    border-radius: 50%;\r\n    box-shadow: inset -1px -1px 10px rgba(0,0,0,0.6), 5px 5px 25px rgba(0,0,0,0.6), -5px -5px 25px rgba(0,0,0,0.6);\r\n    background-color: ${theme.primaryColor};\r\n    background-image: linear-gradient(rgba(255,255,255,0.4), rgba(255,255,255,0));\r\n`;\r\n\r\nexport const H1 = styled.h1`\r\n    font-size: 2.3rem;\r\n    color: ${theme.fontColor};\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    letter-spacing: 2px;\r\n    margin-bottom: 1rem;\r\n`;\r\n\r\nexport const TitleContainer = styled.div`\r\n    position: absolute;\r\n    bottom: 5%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const TitleIcon = styled.div`\r\n    width: 5.5rem;\r\n    height: 5.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: ${theme.fontColor}\r\n`;\r\n\r\nexport const ControlsContainer = styled.div`\r\n    width: 100%;\r\n    height: 40vh;\r\n    padding: 1rem 2.5rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n`;\r\n\r\nexport const P = styled.p`\r\n    font-size: 0.8rem;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    color: ${theme.fontColor};\r\n    margin: 1.5rem 0;\r\n    letter-spacing: 1px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const SocialMediaContainer = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;","import * as React from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { Button, SocialMediaButton } from '../../components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGooglePlusG, faFacebookF, faAngellist } from '@fortawesome/free-brands-svg-icons'\r\nimport { WelcomeContainer, WelcomeCircle, H1, ControlsContainer, P, SocialMediaContainer, TitleContainer, TitleIcon } from './styles';\r\n\r\ninterface IWelcomeProps { }\r\n\r\nconst Welcome: React.FC<IWelcomeProps> = () => {\r\n\r\n    const { top } = useSpring({\r\n        top: '5%',\r\n        from: { top: '-50%' },\r\n    });\r\n\r\n    const { transform: defaultButtonTransform } = useSpring({\r\n        transform: 'translate3d(0px, 0px, 0px)',\r\n        from: { transform: 'translate3d(0px,600px, 0px)' },\r\n        delay: 250,\r\n    });\r\n\r\n    const { transform: primaryButtonTransform } = useSpring({\r\n        transform: 'translate3d(0px, 0px, 0px)',\r\n        from: { transform: 'translate3d(0px,600px, 0px)' },\r\n        delay: 400,\r\n    });\r\n\r\n    const { transform: socialMediaContainerTransform } = useSpring({\r\n        transform: 'translate3d(0px, 0px, 0px)',\r\n        from: { transform: 'translate3d(0px,600px, 0px)' },\r\n        delay: 550,\r\n    });\r\n\r\n    const { transform: titleIconScale } = useSpring({\r\n        transform: 'scale(1)',\r\n        from: { transform: 'scale(0)' },\r\n        delay: 950,\r\n    })\r\n\r\n    const AP = animated(P);\r\n    const AButton = animated(Button);\r\n    const ATitleIcon = animated(TitleIcon);\r\n    const AWelcomeCircle = animated(WelcomeCircle);\r\n    const ASocialMediaContainer = animated(SocialMediaContainer);\r\n\r\n    return (\r\n        <WelcomeContainer>\r\n            <AWelcomeCircle style={{ top }}>\r\n                <TitleContainer>\r\n                    <H1>{'Welcome'}</H1>\r\n                    <ATitleIcon style={{ transform: titleIconScale }}>\r\n                        <FontAwesomeIcon icon={faAngellist} style={{ width: '100%', height: '100%' }} />\r\n                    </ATitleIcon>\r\n                </TitleContainer>\r\n            </AWelcomeCircle>\r\n            <ControlsContainer>\r\n                <AButton variant={'default'} style={{ transform: defaultButtonTransform }}>\r\n                    {'Login'}\r\n                </AButton>\r\n                <AButton variant={'primary'} style={{ transform: primaryButtonTransform }}>\r\n                    {'Create account'}\r\n                </AButton>\r\n                <AP style={{ transform: socialMediaContainerTransform }}>{'or login using social media'}</AP>\r\n                <ASocialMediaContainer style={{ transform: socialMediaContainerTransform }}>\r\n                    <SocialMediaButton onClick={() => console.log('facebook onclick')}>\r\n                        <FontAwesomeIcon icon={faFacebookF} size={'2x'} />\r\n                    </SocialMediaButton>\r\n                    <SocialMediaButton onClick={() => console.log('google plus onclick')}>\r\n                        <FontAwesomeIcon icon={faGooglePlusG} size={'2x'} />\r\n                    </SocialMediaButton>\r\n                </ASocialMediaContainer>\r\n            </ControlsContainer>\r\n        </WelcomeContainer>\r\n    );\r\n}\r\n\r\nexport default Welcome;","import * as React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface IRegisterProps { }\r\n\r\nconst Register: React.FC<IRegisterProps> = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div>\r\n            <div>{'Register screen'}</div>\r\n            <button onClick={() => history.goBack()}>{'Back'}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;","import styled from 'styled-components';\r\nimport { theme } from '../../utils/theme';\r\n\r\nexport const AppContainer = styled.div`\r\n    position: relative;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: ${theme.dark}\r\n`;\r\n\r\nexport const Circle = styled.div`\r\n    position: absolute;\r\n    bottom: -350px;\r\n    left: -20px;\r\n    width: 1000px;\r\n    height: 1000px;\r\n    border-radius: 50%;\r\n    background-color: ${theme.darker06};\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const InnerCircle = styled.div`\r\n    width: 700px;\r\n    height: 700px;\r\n    border-radius: 50%;\r\n    background-color: ${theme.dark};\r\n`;","import * as React from 'react';\r\nimport { AuthenticatedRoute } from '../';\r\nimport { Login, Home, Register, Welcome } from '../../screens';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { AppContainer, Circle, InnerCircle } from './styles';\r\n\r\ninterface IAppProps { }\r\n\r\nconst App: React.FC<IAppProps> = () => {\r\n\r\n    return (\r\n\r\n        <AppContainer>\r\n            <Circle>\r\n                <InnerCircle />\r\n            </Circle>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact={true} path={'/login'} component={Login} />\r\n                    <Route exact={true} path={'/welcome'} component={Welcome} />\r\n                    <Route exact={true} path={'/register'} component={Register} />\r\n                    <AuthenticatedRoute exact={true} path={'/'} screen={<Home />} userLoggedIn={false} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n\r\n        </AppContainer>\r\n    );\r\n}\r\n\r\n\r\nexport default App;","import * as React from 'react';\r\nimport { Route, RouteProps, Redirect } from 'react-router-dom';\r\n\r\ninterface IAuthenticatedRouteProps {\r\n    userLoggedIn: boolean;\r\n    screen: JSX.Element;\r\n}\r\n\r\nconst AuthenticatedRoute: React.FC<IAuthenticatedRouteProps & RouteProps> = ({ userLoggedIn, screen, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={() => userLoggedIn\r\n                ? screen\r\n                : <Redirect to={'/welcome'} />\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AuthenticatedRoute;\r\n","import styled from 'styled-components';\r\nimport { theme } from '../../utils/theme';\r\n\r\ninterface IButtonProps {\r\n    variant: ('default' | 'primary');\r\n}\r\n\r\nconst Button = styled.button<IButtonProps>`\r\n    all: unset;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 3rem;\r\n    background-color: ${({ variant }) => variant === 'default' ? 'rgba(255,255,255,0.15)' : theme.primaryColor};\r\n    color: ${theme.fontColor};\r\n    text-transform: uppercase;\r\n    margin-bottom: .7rem;\r\n    font-weight: 700;\r\n`;\r\n\r\nexport default Button;","import styled from 'styled-components';\r\nimport { theme } from '../../utils/theme';\r\n\r\nconst SocialMediaButton = styled.button`\r\n    all: unset;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 3rem;\r\n    height: 3rem;\r\n    border: 3px solid ${theme.fontColor};\r\n    border-radius: 50%;\r\n    background: transparent;\r\n    color: ${theme.fontColor};\r\n    margin: 0 .75rem;\r\n`;\r\n\r\nexport default SocialMediaButton;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}